#ifndef BYTECODE_GENERATOR
#define BYTECODE_GENERATOR
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../../core/extensions/memory_extensions.h"
#include "../../core/logger/logger.h"
#include "../../core/types/bytecode.h"
#include "../../core/types/symbol_table.h"
#include "../types/abstract_syntax_tree.h"

/// @struct bytecode_generator
/// @brief The bytecode generator that compiles the abstract syntax tree into L# instructions.
typedef struct bytecode_generator bytecode_generator;

struct bytecode_generator
{
    instruction* instructions;
    int instruction_count;
    int instruction_capacity;
    symbol_table* symbols;
    int variable_count;
    int function_count;
    char** objects;
    int object_count;
    int object_capacity;
};

/// @brief Creates a `bytecode_generator`.
/// @return A new bytecode generator.
bytecode_generator* create_bytecode_generator();

/// @brief Adds the `new_instruction` to the `generator`.
/// @param generator The `bytecode_generator` to add an instruction to.
/// @param instruction The `new_instruction` to add to the bytecode generator.
void emit_instruction(bytecode_generator* generator, instruction new_instruction);

/// @brief Adds the `object` to the `generator`, and increments the object count in the bytecode.
/// @param generator The `bytecode_generator` to add the object to.
/// @param object The string to add to the bytecode.
/// @return The index of the added object, or `-1` if adding was unsuccessful.
int add_object(bytecode_generator* generator, char* object);

/// @brief Generates bytecode for the abstract syntax `node`.
/// @param generator The `bytecode_generator` to add the generated bytecode to.
/// @param node The abstract syntax node that will have bytecode generated for it.
void generate_bytecode(bytecode_generator* generator, abstract_syntax_node* node);

/// @brief Compiles an abstract syntax tree into bytecode.
/// @param ast The abstract syntax tree to compile into bytecode.
/// @param instruction_count The amount of instructions.
/// @param output_filename The name of the file the bytecode will be written to.
/// @return A collection of `instruction` in bytecode.
instruction* compile_ast_to_bytecode(abstract_syntax_node* ast, int* instruction_count, const char* output_filename);

/// @brief Writes the bytecode `instructions` to the `filename` provided.
/// @param instructions A collection of bytecode instructions to write to the bytecode file.
/// @param instruction_count The number of bytecode instructions that will be written.
/// @param objects A collection of objects to write to the bytecode file.
/// @param object_count The number of objects that will be written.
/// @param filename The name of the file to write the bytecode instructions to.
void write_bytecode_to_file(instruction* instructions, int instruction_count, char** objects, int object_count, const char* filename);

/// @brief Deallocates the memory used for the `generator`.
/// @param generator The `bytecode_generator` to free.
void free_bytecode_generator(bytecode_generator* generator);

#endif